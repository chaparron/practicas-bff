input CancelOrderInput {
    accessToken: String!
    orderId: Int!
    supplierOrderId: Int!
    cancelOptionReason: CustomerCancelOptionReason!
    comment: String
}

enum UserType {
    SUPPLIER,
    CUSTOMER
}

enum CustomerCancelOptionReason {
    REGRET
    COMMODITY_DELAY
    PRICE_DIFFERENCE
    DELIVERY_DIFFERENCE
    NO_MONEY
    OTHER
}

enum SupplierCancelOptionReason {
    INCORRECT_PRICE,
    INCORRECT_TAX,
    CUSTOMER_CLOSED,
    INSUFFICIENT_AMOUNT,
    CUSTOMER_REGRET,
    NO_STOCK,
    STORE_OUTSIDE_COVERAGE_AREA,
    OTHERS,
    ACCEPT_CANCELED_ORDER
}


enum OrderUpdateReason {
    INVALID_SUPPLIER_ORDERS_STATUS,
    ORDER_NOT_FOUND,
    INVALID_SUPPLIER,
    INVALID_DELIVERY_COST,
    INVALID_PRODUCTS,
    CANCEL_REQUESTED_SUPPLIER_MUST_CANCEL
}

type OrderUpdateFailed {
    reason: OrderUpdateReason
}

type FinalOrderState {
    orderId: Int
    supplierOrderId: Int
    cancelRequested: Boolean
    canceledBy: UserType
    customerCancellationReason: CustomerCancelOptionReason
    supplierCancelOptionReason: SupplierCancelOptionReason
    orderStatus: OrderStatus
}

union CancelOrderResult = OrderUpdateFailed | FinalOrderState

union CancelOrderResonResult = OrderUpdateFailed | Void


enum SupplierOrderStatus {
    PENDING,
    CONFIRMED,
    SHIPPED,
    CANCELED
}

enum FilterOrderStatus {
    ALL,
    OPEN,
    CLOSED
}

input FindOrdersInput {
    accessToken: String!
    orderId: Int
    countryId: String
    size: Int!,
    page: Int!,
    status: FilterOrderStatus
}

input FindSupplierOrderInput {
    accessToken: String!
    countryId: String!
    orderId: Int!
    supplierOrderId: Int!
}

enum Direction {
    ASC,
    DESC
}

type SortResult {
    field: String
    direction: Direction
}

type Headers {
    page: Int,
    page_size: Int,
    total: Int,
    sort: SortResult
}

enum OrderStatus {
    PENDING,
    IN_PROGRESS,
    FINISHED
}

type OrderItems {
    id: Int
    product: Product
    productTitle: String
    productEan: String
    price: Float
    quantity: Int
    subtotal: Float
    display: Display
}

type OrderItemProduct {
    id: Int,
    name: String,
    enabled: Boolean,
    category: Category,
    brand: Brand,
    ean: String,
    description: String,
    images: [Image],
    created: TimestampOutput,
    manufacturer: Manufacturer,
    title: String
}


enum RatingStatus {
    ENABLED,
    DISABLED,
    REPORTED
}

type Rating {
    id: Int
    supplier: Supplier
    customerName: String
    created: TimestampOutput
    opinion: String
    score: Int
    owner: RatingOwner
    status: RatingStatus
    percentage: Float
}


type SupplierOrder {
    id:Int
    supplier: Supplier
    status: SupplierOrderStatus
    created: TimestampOutput
    updated: TimestampOutput
    shippedAt: TimestampOutput
    shipAt: TimestampOutput
    deliveryCost: Float
    total: Float
    credits_paid: Float
    money_paid: Float
    units: Int
    products: [OrderItems]
    rating: RatingEntry
    canCustomerRate: Boolean
    canSupplierRate: Boolean
    customerRated: Boolean
    supplierRated: Boolean
    cancelRequested: Boolean
}


type SupplierOrderResult {
    id:Int
    order: Order
    supplier: Supplier
    status: SupplierOrderStatus
    created: TimestampOutput
    updated: TimestampOutput
    shippedAt: TimestampOutput
    shipAt: TimestampOutput
    deliveryCost: Float
    total: Float
    credits_paid: Float
    money_paid: Float
    localTaxes: Float
    amount: Float
    units: Int
    products: [OrderItems]
    rating: RatingEntry
    canCustomerRate: Boolean
    canSupplierRate: Boolean
    customerRated: Boolean
    supplierRated: Boolean
    cancelRequested: Boolean
}

enum RatingOwner {
    SUPPLIER,
    CUSTOMER
}

type RatingEntry {
    SUPPLIER: Rating
    CUSTOMER: Rating
}


type OrderCancellation {
    supplierOrderId: Int
    orderId: Int
    supplierId: Int
    userType: UserType
    customerCancelOptionReason: CustomerCancelOptionReason
    supplierCancelOptionReason: SupplierCancelOptionReason
}

type Order {
    id: Int
    customer: Customer
    status: OrderStatus
    created: TimestampOutput
    updated: TimestampOutput
    deliveryAddress: AddressType
    deliveryPreference: DeliveryPreference
    supplierOrders: [SupplierOrder]
    ordersCancellations: [OrderCancellation]
    total: Float
}

enum CustomerOrderFindFailedReason {
    ORDER_NOT_FOUND

}

type CustomerOrderFindFailed {
    reason: CustomerOrderFindFailedReason
}

union CustomerOrdersResult = CustomerOrdersResponse | CustomerOrderFindFailed

union CustomerOrderResult = CustomerOrderResponse | CustomerOrderFindFailed

type CustomerOrdersResponse {
    headers: Headers
    content: [Order]
}

type CustomerOrderResponse {
    supplierOrder: SupplierOrderResult
    customer: Customer
    orderCancellation: OrderCancellation
}

enum CartFailedReason {
    FORBIDDEN,
    BAD_REQUEST,
    INVALID_ADDRESS,
    EMPTY_PRODUCTS,
    PRODUCTS_UNAVAILABLE
}

type CartFailed {
    reason: CartFailedReason
}

union CartResult = Cart | CartFailed

type Cart {
    availableProducts: [ProductCart]
    suppliers: [Supplier]
}

type ProductCart {
    product: Product,
    supplierPrices: [SupplierPrice]
}

type SupplierPrice {
    id: Int,
    name: String
    price: Float,
    minUnits: Int,
    maxUnits: Int,
    display: Display,
    avatar: String,
    configuration: SupplierProductConfiguration,
    deliveryZone: DeliveryZone

}

input RefreshCartInput {
    accessToken: String!
    products: [Int]
}

enum PlaceOrderFailedReason {
    DELIVERY_COST_HAS_CHANGED,
    INVALID_CUSTOMER,
    BAD_REQUEST,
    PRODUCT_PRICES_HAS_CHANGED,
    SUPPLIER_AVAILABILITY_HAS_CHANGED,
    INVALID_SUPPLIER_ORDER,
    INVALID_ORDER,
    MIN_UNITS_NO_REACHED,
    MAX_UNITS_EXCEEDED,
    MIN_AMOUNT_NO_REACHED,
    MAX_AMOUNT_EXCEEDED,
    MAX_ALLOWED_PRODUCT_EXCEEDED,
    INVALID_COUPON
}

union PlaceOrderResult = Void | PlaceOrderFailed

type PlaceOrderFailed {
    reason: PlaceOrderFailedReason
}

input OrderInput {
    supplierId: Int!
    deliveryCost: Float!
    deliveryZoneId: Int!
    products: [ProductOrderInput]!
}

input PlaceOrderInput {
    accessToken: String!
    wabiPayAccessToken: String
    coupons: [String]
    orders: [OrderInput]!
}

input ProductOrderInput {
    productId: Int!
    quantity: Int!
    units: Int
    price: Float!
}

enum SupplierFailedReason {
    NOT_FOUND
}

input GetSupplierInput {
    accessToken: String!
    supplierId: Int!
}

type SupplierFailed {
    reason: SupplierFailedReason
}

union SupplierResponse = Supplier | SupplierFailed

type SupplierRatingsResponse {
    headers: Headers
    content: [Rating]
}

input GetSupplierRatingsInput {
    page: Int
    size: Int
    accessToken: String!
    supplierId: Int!
}

input GetSupplierOrderInput {
    accessToken: String!
    supplierOrderId: Int
}

input OrderSummaryInput {
    accessToken: String!
    wabiPayAccessToken: String
    products: [SupplierCartProductInput]!
    coupons: [String]
}

input SupplierCartProductInput {
    supplierId: Int!
    deliveryZoneId: Int!
    items: [CartItemInput]!
}

input GetSupplierOrdersInput {
    accessToken: String!
    orderId: ID!
}

input CartItemInput {
    productId: Int!
    units: Int
    quantity: Int!
}

type OrderSummaryResponse {
    orderSummary: [OrderSummary]
}

type OrderSummary {
    supplier: Supplier,
    summary: [Summary]
}

enum CartSummaryItemType {
    # IBB Component price
    IBB,
    # Only product prices
    PRODUCTS_TOTAL,
    # Product prices plus product taxes
    SUBTOTAL,
    # Product prices no IVA
    NET_SUBTOTAL,
    # Supplier delivery cost
    DELIVERY_COST,
    # Order final price
    ORDER_TOTAL,
    # Wabi Credits
    CREDITS_USED,
    #Money used
    WABIMONEY_USED,
    PAYMENT_PENDING,
    DISCOUNT
}

type Summary {
    type: CartSummaryItemType!
    value: Float!
    metadata: [MetaEntry]
}

type MetaEntry {
    key: String!,
    value: String!
}

enum SupplierOrderFailedReason {
    NOT_FOUND
}

type SupplierOrderFailed {
    reason: SupplierOrderFailedReason
}

enum SummaryFailedReason {
    NOT_FOUND
    PRODUCT_AVAILABILITY_HAS_CHANGED
    PRODUCTS_UNAVAILABLE,
    INVALID_COUPON
}

type SummaryFailed {
    reason: SummaryFailedReason
}

union SupplierOrderResponse = SupplierOrder | SupplierOrderFailed

union SummaryResult = OrderSummaryResponse | SummaryFailed