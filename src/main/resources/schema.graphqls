
type Query {

    # Existence phone number test
    testPhoneNumber(input: PhoneInput!): Void!

}

type Mutation {
    # User login
    login(input: LoginInput!): LoginResult!

    # Refresh Credential from a logged user
    refreshCredentials(input: RefreshCredentialsInput!): RefreshCredentialsResult!

    # Change password from an existing user
    changePassword(input: ChangePasswordInput!): ChangePasswordResult

    # Reset password request
    resetPassword(input: ResetPasswordRequestInput!): Void!

    # Reset password confirm
    resetPasswordConfirm(input: ResetPasswordConfirmInput!): ConfirmPasswordResult!

    # Users
    updateProfile(input: UserProfileInput!): ProfileCredentialsResult!

}


enum PageSize {
    ZERO
    ONE
    TEN
    TWENTY
    FIFTY
    ONE_HUNDRED
}

enum UsernameRegistrationReason {
    INVALID_FIRST_NAME,
    INVALID_LAST_NAME,
    INVALID_USERNAME,
    DUPLICATE_USERNAME,
    INVALID_FIRST_NAME_LENGTH,
    INVALID_LAST_NAME_LENGTH,
    INVALID_USERNAME_LENGTH
}

enum ConfirmPasswordReason {
    TOKEN_EXPIRED
}

enum UpdateProfileReason {
    # Duplicate username when update profile
    DUPLICATE_USERNAME
}

enum CompleteProfileReason {
    # Generic Error
    PROFILE_ERROR
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

input PageInput {
    # n√∫mero de pagina comienza en 1
    number: Int!
    size: PageSize!
}

input ListUsersInput {
    query: String
    page: PageInput!
    accessToken: String!
}

input ListMyFavoritesInput {
    page: PageInput!
    accessToken: String!
}

input UserProfileInput {
    id: ID
    firstName: String
    lastName: String
    username: String
    document: String
    # date of birth
    dob: String
    areaCode: String
    phone: String
    seller: String
    address: String
    seller_type: String
    gender: Gender
    accessToken: String
}

input CompleteProfileInput {
    document: String!
    phone: String!
    address: String!
    recaptchaResponse: String!
    accessToken: String!
}

input UsernameInput {
    userId: ID!
    accessToken: String!
}

input TechnicalReviewInput {
    id: ID!
    accessToken: String!
}


input ListGroupsInput {
    authType: AuthType!
    accessToken: String!
}



# Se requiere un ID sin accessToken
input IdInput {
    id: ID!
}

input UserInput {
    id: ID!
    accessToken: String!
}

input UploadImageInput {
    encodedFile: String!
    accessToken: String!
}

type Profile {
    document: String
    dob: String
    area_code: String
    phone: String
    seller: String
    seller_type: String
    gender: Gender
    address: String
}

type UsernameRegistrationFailed {
    reason: UsernameRegistrationReason
}

type RegisterFailed {
    registerReason: RegisterFailureReason!
}

type ProfileCredentials {
    accessToken: String
}

type UpdateProfileFailed {
    reason: UpdateProfileReason
}

type CompleteProfileFailed {
    reason: CompleteProfileReason
}

type Sort{
    field: String!
    direction: String!
}
type Facet{
    id: String!
    name: String!
    slices: [Slices]
}

type Slices{
    size: Long!
    obj: Slice
}

type Slice{
    id: Long!
    name: String!
    key: String!
}

input UpdateBoostInput{
    id: ID!
    boost: Long!
    accessToken: String!
}

input FacetFilter{
    key: String!
    value: String!
}

type Filter{
    key: String
    value: String
    name: String

}


union UsernameRegistrationResult = UsernameRegistrationFailed | Void

union ProfileCredentialsResult = UpdateProfileFailed  | ProfileCredentials  |  Void