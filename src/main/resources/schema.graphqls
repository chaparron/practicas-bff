
type Query {

    # Existence phone number test
    testPhoneNumber(input: PhoneInput!): Void!

    # Find Customer by Id
    myProfile(input: CustomerInput!): Customer!

    search (input: SearchInput!): SearchResult

    findRootCategories(input: FindRootsInput): [Category]

    # Verify Email
    verifyEmail(input: VerifyEmailInput!): VerifyEmailResult!

    # Resend email for verification.
    resendVerifyEmail(input : AccessTokenInput!): ResendVerifyEmailResult!

    # Resend sms for Verification
    resendVerifySMS(input: AccessTokenInput!) : ResendVerifySMSResult!

}

type Mutation {
    # User login
    login(input: LoginInput!): LoginResult!

    # Refresh Credential from a logged user
    refreshCredentials(input: RefreshCredentialsInput!): RefreshCredentialsResult!

    # Change password from an existing user
    changePassword(input: ChangePasswordInput!): ChangePasswordResult

    # Reset password request
    resetPassword(input: ResetPasswordRequestInput!): Void!

    # Reset password confirm
    resetPasswordConfirm(input: ResetPasswordConfirmInput!): ConfirmPasswordResult!

    # Update Customer Profile
    updateProfile(input: CustomerUpdateInput!): CustomerUpdateResult!

    # Verify Customer phone
    verifyPhone(input: VerifyPhoneInput!): VerifyPhoneResult!

    # Set Preferred Customer address
    setPreferredAddress(input: PreferredAddressInput!): PreferredAddressResult!

    # Add new Customer address
    addAddress(input: AddressInput!): Void!

    # Update Customer address
    updateAddress(input: AddressInput!) : UpdateAddressResult!

    # Delete Customer address
    deleteAddress(input: AddressIdInput!) : DeleteAddressResult!

}


enum PageSize {
    ZERO
    ONE
    TEN
    TWENTY
    FIFTY
    ONE_HUNDRED
}

enum UsernameRegistrationReason {
    INVALID_FIRST_NAME,
    INVALID_LAST_NAME,
    INVALID_USERNAME,
    DUPLICATE_USERNAME,
    INVALID_FIRST_NAME_LENGTH,
    INVALID_LAST_NAME_LENGTH,
    INVALID_USERNAME_LENGTH
}

enum CompleteProfileReason {
    # Generic Error
    PROFILE_ERROR
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

input PageInput {
    # n√∫mero de pagina comienza en 1
    number: Int!
    size: PageSize!
}

input ListUsersInput {
    query: String
    page: PageInput!
    accessToken: String!
}

input ListMyFavoritesInput {
    page: PageInput!
    accessToken: String!
}

input CompleteProfileInput {
    document: String!
    phone: String!
    address: String!
    recaptchaResponse: String!
    accessToken: String!
}

input UsernameInput {
    userId: ID!
    accessToken: String!
}

input TechnicalReviewInput {
    id: ID!
    accessToken: String!
}


input ListGroupsInput {
    authType: AuthType!
    accessToken: String!
}


# Se requiere un ID sin accessToken
input IdInput {
    id: ID!
}

input UserInput {
    id: ID!
    accessToken: String!
}

input UploadImageInput {
    encodedFile: String!
    accessToken: String!
}

input AccessTokenInput {
    accessToken: String!
}

type Profile {
    id: ID
    name: String
    authorities: [String]
}

type UsernameRegistrationFailed {
    reason: UsernameRegistrationReason
}

type RegisterFailed {
    registerReason: RegisterFailureReason!
}

type ProfileCredentials {
    accessToken: String
}

type CompleteProfileFailed {
    reason: CompleteProfileReason
}

type Sort{
    field: String!
    direction: String!
}
type Facet{
    id: String!
    name: String!
    slices: [Slices]
}

type Slices{
    size: ID!
    obj: Slice
}

type Slice {
    id: Int!
    name: String!
    key: String!
}

input UpdateBoostInput {
    id: ID!
    boost: ID!
    accessToken: String!
}

input FacetFilter{
    key: String!
    value: String!
}

type Filter{
    key: String
    value: String
    name: String

}


union UsernameRegistrationResult = UsernameRegistrationFailed | Void

union CustomerUpdateResult = CustomerErrorFailed  | Customer

union VerifyEmailResult = CustomerErrorFailed | Void

union VerifyPhoneResult = CustomerErrorFailed | Void

union ResendVerifyEmailResult = CustomerErrorFailed | Void

union ResendVerifySMSResult = CustomerErrorFailed | Void

union PreferredAddressResult = CustomerErrorFailed | Void

union UpdateAddressResult = CustomerErrorFailed | Void

union DeleteAddressResult = CustomerErrorFailed | Void