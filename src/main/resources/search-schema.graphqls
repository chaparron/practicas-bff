input SearchInput {
    accessToken: String!,
    addressId: Int,
    keyword: String,
    sort: String,
    sortDirection: SortInput
    categoryId: Int,
    page: Int!,
    size: Int!,
    brand: Int
}

enum SortInput {
    DESC,
    ASC,
    DEFAULT
}

type SearchResult {
    header: Header,
    sort: Sort
    breadCrumb: [BreadCrumb]
    products: [ProductSearch],
    facets: [Facet]
}

type Header {
    total: Int,
    pageSize: Int,
    currentPage: Int
}

type BreadCrumb {
    id: Int,
    name: String
}

type ProductSearch {
    id: Int,
    name: String,
    enabled: Boolean,
    category: Category,
    brand: Brand,
    ean: String,
    description: String,
    images: [Image],
    created: TimestampOutput,
    manufacturer: Manufacturer,
    prices: [Price]
    title: String
    priceFrom: Price
    minUnitsPrice: Price
}

type Feature {
    id: Int,
    name: String,
    required: Boolean,
    hasUnit: Boolean,
    featureType: FeatureType,
    value: FeatureValue
}

type FeatureValue {
    id: Int,
    name: String,
    unit: MeasurementUnit,
    enabled: Boolean
}

type MeasurementUnit {
    id: Int,
    name: String,
    enabled: Boolean
}

enum FeatureType {
    SINGLE,
    MULTIPLE,
    BINARY,
    RANGE
}

type Image {
    id: String,
    originalName: String,
    imageOrder: Int,
    added: TimestampOutput,
}

type Supplier {
    id: Int,
    name: String,
    legalName: String,
    avatar: String,
    enabled: Boolean,
    phone: String,
    legalId: String,
    address: String,
    postalCode: String,
    maxAmount: Int,
    minAmount: Int,
    deliveryCost: Float,
    rating: RatingScore,
}

type Coordinate {
    lat: Float,
    lng: Float
}

type Manufacturer {
    id: Int,
    name: String,
    enabled: Boolean,
    phone: String,
    avatar: String
}

type Price {
    supplier: Supplier,
    value: Float,
    updated: TimestampOutput,
    enabled: Boolean,
    maxUnits: Int
    minUnits: Int
}


input ProductInput {
    productId : Int
    accessToken: String
}


enum ProductErrorReason {
    PRODUCT_NOT_FOUND,
    BAD_REQUEST
}

type ProductFailed {
    reason: ProductErrorReason
}

enum PriceErrorReason {
    PRICE_NOT_FOUND,
    NO_SUPPLIER_FOUND
}

type PriceFailed {
    reason: PriceErrorReason
}

type Product {
    id: Int,
    name: String,
    enabled: Boolean,
    category: Category,
    brand: Brand,
    ean: String,
    description: String,
    features: [Feature],
    images: [Image],
    created: TimestampOutput,
    manufacturer: Manufacturer,
    prices: PriceResult
    title: String
    priceFrom: Price
    minUnitsPrice: Price
}

type Prices {
    prices: [Price]
}

union ProductResult = Product | ProductFailed
union PriceResult = Prices | PriceFailed