input CreditLinesRequestInput{
  accessToken: String!
  scrollInput: ScrollInput!
}

type CreditLines{
  credits: [CreditLine]!
  providerLabel(languageTag:String!): String!
  action: CreditLinesAction
  scroll: String
}

union CreditLinesAction = ButtonWithUrlCreditLinesAction

type ButtonWithUrlCreditLinesAction{
  text(languageTag: String!): String!
  redirectUrl: String!
}

interface CreditLine{
  approvedLimit: Money!
}

type SuperMoneyCreditLine implements CreditLine {
  approvedLimit: Money!
  toRepay: Money!
  remaining: Money!
}

union CreditLinesResult = CreditLines

input LoanPaymentRequestInput {
  accessToken: String!
  orderId: Long!
  supplierId: String!
  invoiceCode: String!
  amount: Float!
}

type LoanPayment {
  id: ID!
  orderId: Long!
  customerId: String!
  supplierId: String!
  created: TimestampOutput!
  externalId: String!
  money: Money!
  loan: Loan!
  invoice: Invoice!
}

type Loan {
  id: ID!
  created: TimestampOutput!
  approved: TimestampOutput
  paid: TimestampOutput
  dueDate: TimestampOutput!
  status: String!

}

type Invoice {
  id: ID!
  code: String!
}

union LoanPaymentResult = LoanPayment

type CreditLineProvider {
  provider: CreditProvider!
}

enum CreditProvider {
  SUPERMONEY
}