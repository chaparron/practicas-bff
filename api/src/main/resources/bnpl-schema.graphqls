input CreditLinesRequestInput{
  accessToken: String!
  scrollInput: ScrollInput!
}

type CreditLines{
  credits: [CreditLine]!
  provider: CreditLineProvider!
  action: CreditLinesAction
  scroll: String
}

union CreditLinesAction = ButtonWithUrlCreditLinesAction

type ButtonWithUrlCreditLinesAction{
  text(languageTag: String!): String!
  redirectUrl: String!
}

interface CreditLine{
  approvedLimit: Money!
}

type SuperMoneyCreditLine implements CreditLine {
  approvedLimit: Money!
  toRepay: Money!
  remaining: Money!
}

union CreditLinesResult = CreditLines

input LoanPaymentRequestInput {
  accessToken: String!
  supplierOrderId: Long!
  supplierId: Long!
  invoice: InvoiceInput!
  amount: Float!
}

input InvoiceInput {
  code: String!
  fileId: String!
}

type LoanPayment {
  money: Money!
  loan: Loan!
  invoice: Invoice!
}

type Loan {
  created: TimestampOutput!
  externalId: String!
}

type Invoice {
  code: String!
}

union LoanPaymentResult = LoanPayment

type CreditLineProvider {
  provider: CreditProvider!
  poweredByLabel(languageTag: String!): String!
}

enum CreditProvider {
  SUPERMONEY
}