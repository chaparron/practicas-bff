input CancelOrderInput {
  accessToken: String!
  orderId: Int!
  supplierOrderId: Int!
  cancelOptionReason: CustomerCancelOptionReason!
  comment: String
}

enum UserType {
  SUPPLIER,
  CUSTOMER
}

enum CustomerCancelOptionReason {
  REGRET
  COMMODITY_DELAY
  PRICE_DIFFERENCE
  DELIVERY_DIFFERENCE
  NO_MONEY
  OTHER
}

enum SupplierCancelOptionReason {
  INCORRECT_PRICE,
  INCORRECT_TAX,
  CUSTOMER_CLOSED,
  INSUFFICIENT_AMOUNT,
  CUSTOMER_REGRET,
  NO_STOCK,
  STORE_OUTSIDE_COVERAGE_AREA,
  OTHERS,
  ACCEPT_CANCELED_ORDER
}


enum OrderUpdateReason {
  INVALID_SUPPLIER_ORDERS_STATUS,
  ORDER_NOT_FOUND,
  INVALID_SUPPLIER,
  INVALID_DELIVERY_COST,
  INVALID_PRODUCTS,
  CANCEL_REQUESTED_SUPPLIER_MUST_CANCEL
}

type OrderUpdateFailed {
  reason: OrderUpdateReason
}

type FinalOrderState {
  orderId: Int!
  supplierOrderId: Int!
  cancelRequested: Boolean
  canceledBy: UserType
  customerCancellationReason: CustomerCancelOptionReason
  supplierCancelOptionReason: SupplierCancelOptionReason
  orderStatus: OrderStatus
}

union CancelOrderResult = OrderUpdateFailed | FinalOrderState

union CancelOrderResonResult = OrderUpdateFailed | Void


enum SupplierOrderStatus {
  PENDING,
  CONFIRMED,
  SHIPPED,
  CANCELED
}

enum FilterOrderStatus {
  ALL,
  OPEN,
  CLOSED
}

input FindOrdersInput {
  accessToken: String!
  orderId: Int
  countryId: String
  size: Int!,
  page: Int!,
  status: FilterOrderStatus
}

input FindSupplierOrderInput {
  accessToken: String!
  orderId: Int
  supplierOrderId: Int!
  countryId: String
}

input FindCustomerAndSupplierOrdersInput {
  accessToken: String!
  orderId: Int!
}

enum Direction {
  ASC,
  DESC
}

type SortResult {
  field: String
  direction: Direction
}

type Headers {
  page: Int!
  page_size: Int!
  total: Int!
  sort: SortResult
}

enum OrderStatus {
  PENDING,
  IN_PROGRESS,
  FINISHED
}

type OrderItems {
  id: Int!
  product: Product!
  productTitle: String!
  productEan: String!
  price: Float!
  priceMoney: Money!
  quantity: Int!
  subtotal: Float!
  subtotalMoney: Money!
  display: Display!
  partialSummary: PartialSummary
}

type Money {
  currency: String!
  amount: Float!
  symbol(languageTag: String!): String!
  text(languageTag: String!): String!
}

type PartialSummary {
  quantity: Int!
}

type OrderItemProduct {
  id: Int!
  name: String!
  enabled: Boolean!
  category: Category,
  brand: Brand,
  ean: String,
  description: String,
  images: [Image]!,
  created: TimestampOutput,
  manufacturer: Manufacturer,
  title: String
}


enum RatingStatus {
  ENABLED,
  DISABLED,
  REPORTED
}

type Rating {
  id: Int!
  supplier: Supplier!
  customerName: String
  created: TimestampOutput!
  opinion: String
  score: Int!
  owner: RatingOwner!
  status: RatingStatus!
  percentage: Float
}


type SupplierOrder {
  id:Int!
  order: Order
  supplier: Supplier!
  status: SupplierOrderStatus!
  created: TimestampOutput!
  updated: TimestampOutput
  shippedAt: TimestampOutput
  shipAt: TimestampOutput
  deliveryCost: Float!
  deliveryCostMoney: Money!
  total: Float!
  totalMoney: Money!
  subTotal: Float
  subTotalMoney: Money
  credits_paid: Float
  creditsPaidMoney: Money
  money_paid: Float
  moneyPaidMoney: Money
  payment_pending: Float
  paymentPendingMoney: Money
  total_wabipay: Float
  totalWabipayMoney: Money
  service_fee: Float
  serviceFeeMoney: Money
  discounts: Float
  discountsMoney: Money
  units: Int
  products: [OrderItems!]!
  rating: RatingEntry
  canCustomerRate: Boolean
  canSupplierRate: Boolean
  customerRated: Boolean
  supplierRated: Boolean
  availabilityDifference: Boolean!
  cancelRequested: Boolean
  summary: [Summary]
}


type SupplierOrderResult {
  id:Int!
  order: Order!
  supplier: Supplier!
  status: SupplierOrderStatus!
  created: TimestampOutput!
  updated: TimestampOutput
  shippedAt: TimestampOutput
  shipAt: TimestampOutput
  deliveryCost: Float!
  deliveryCostMoney: Money!
  total: Float!
  totalMoney: Money!
  subTotal: Float
  subTotalMoney: Money
  credits_paid: Float
  creditsPaidMoney: Money
  money_paid: Float
  moneyPaidMoney: Money
  service_fee: Float
  serviceFeeMoney: Money
  payment_pending: Float
  paymentPendingMoney: Money
  localTaxes: Float
  localTaxesMoney: Money
  discounts: Float
  discountsMoney: Money
  discount_used: Float
  discountUsedMoney: Money
  total_wabipay: Float
  totalWabipayMoney: Money
  amount: Float
  amountMoney: Money
  units: Int
  products: [OrderItems!]!
  rating: RatingEntry
  canCustomerRate: Boolean
  canSupplierRate: Boolean
  customerRated: Boolean
  supplierRated: Boolean
  cancelRequested: Boolean
  availabilityDifference: Boolean!
  summary: [Summary]
}

type SupplierOrderAndOrderCancellations {
  id:Int!
  order: Order
  orderCancellation: OrderCancellation
  supplier: Supplier
  status: SupplierOrderStatus
  created: TimestampOutput
  updated: TimestampOutput
  shippedAt: TimestampOutput
  shipAt: TimestampOutput
  deliveryCost: Float
  deliveryCostMoney: Money
  total: Float
  totalMoney: Money
  subTotal: Float
  subTotalMoney: Money
  credits_paid: Float
  creditsPaidMoney: Money
  money_paid: Float
  moneyPaidMoney: Money
  service_fee: Float
  serviceFeeMoney: Money
  payment_pending: Float
  paymentPendingMoney: Money
  localTaxes: Float
  localTaxesMoney: Money
  discounts: Float
  discountsMoney: Money
  discount_used: Float
  discountUsedMoney: Money
  total_wabipay: Float
  totalWabipayMoney: Money
  amount: Float
  amountMoney: Money
  units: Int
  products: [OrderItems]
  rating: RatingEntry
  canCustomerRate: Boolean
  canSupplierRate: Boolean
  customerRated: Boolean
  supplierRated: Boolean
  cancelRequested: Boolean
  summary: [Summary]
  orderedSummary: [Summary]
}

enum RatingOwner {
  SUPPLIER,
  CUSTOMER
}

type RatingEntry {
  SUPPLIER: Rating
  CUSTOMER: Rating
}


type OrderCancellation {
  supplierOrderId: Int!
  orderId: Int!
  supplierId: Int!
  userType: UserType!
  customerCancelOptionReason: CustomerCancelOptionReason
  supplierCancelOptionReason: SupplierCancelOptionReason
}

type Order {
  id: Int!
  customer: Customer!
  status: OrderStatus!
  created: TimestampOutput!
  updated: TimestampOutput
  deliveryAddress: AddressType!
  workingDays: WorkingDays
  supplierOrders: [SupplierOrder!]!
  ordersCancellations: [OrderCancellation]
  total_credits: Float
  totalCreditsMoney: Money
  total_money: Float
  totalMoneyMoney: Money
  total_service_fee: Float
  totalServiceFeeMoney: Money
  total_pending: Float
  totalPendingMoney: Money
  total_discounts_used: Float
  totalDiscountsUsedMoney: Money
  total_wabipay: Float
  totalWabipayMoney: Money
  subTotal: Float
  subTotalMoney: Money
  discounts: Float
  discountsMoney: Money
  total: Float
  totalMoney: Money
}

enum CustomerOrderFindFailedReason {
  ORDER_NOT_FOUND

}

type CustomerOrderFindFailed {
  reason: CustomerOrderFindFailedReason
}

union CustomerOrdersResult = CustomerOrdersResponse | CustomerOrderFindFailed

union CustomerOrderResult = CustomerOrderResponse | CustomerOrderFindFailed

union CustomerSupplierOrderResult = CustomerSupplierOrdersResponse | CustomerOrderFindFailed

type CustomerOrdersResponse {
  headers: Headers!
  content: [Order]
}

type CustomerOrderResponse {
  supplierOrder: SupplierOrderResult
  customer: Customer!
  orderCancellation: OrderCancellation
}

type CustomerSupplierOrdersResponse {
  supplierOrderAndOrderCancellations: [SupplierOrderAndOrderCancellations]
  customer: Customer!
}

enum CartFailedReason {
  FORBIDDEN,
  BAD_REQUEST,
  INVALID_ADDRESS,
  EMPTY_PRODUCTS,
  PRODUCTS_UNAVAILABLE
}

type CartFailed {
  reason: CartFailedReason
}

union CartResult = Cart | CartFailed

type Cart {
  availableProducts: [ProductCart]!
  suppliers: [Supplier]!
}

type ProductCart {
  product: Product!
  supplierPrices: [SupplierPrice]!
}

type SupplierPrice {
  id: Int!
  name: String
  price: Float
  priceMoney: Money
  minUnits: Int
  maxUnits: Int
  display: Display
  avatar: String!
  configuration: SupplierProductConfiguration
  deliveryZone: DeliveryZone

}

input RefreshCartInput {
  accessToken: String!
  products: [Int]
}

enum PlaceOrderFailedReason {
  DELIVERY_COST_HAS_CHANGED,
  INVALID_CUSTOMER,
  BAD_REQUEST,
  PRODUCT_PRICES_HAS_CHANGED,
  SUPPLIER_AVAILABILITY_HAS_CHANGED,
  INVALID_SUPPLIER_ORDER,
  INVALID_ORDER,
  MIN_UNITS_NO_REACHED,
  MAX_UNITS_EXCEEDED,
  MIN_AMOUNT_NO_REACHED,
  MAX_AMOUNT_EXCEEDED,
  MAX_ALLOWED_PRODUCT_EXCEEDED,
  PRODUCTS_UNAVAILABLE,
  INVALID_COUPON
}

union PlaceOrderResult = Void | PlaceOrderFailed

type PlaceOrderFailed {
  reason: PlaceOrderFailedReason
}

input OrderInput {
  supplierId: Int!
  deliveryCost: Float!
  deliveryZoneId: Int!
  products: [ProductOrderInput]!
}

input PlaceOrderInput {
  accessToken: String!
  wabiPayAccessToken: String!
  coupons: [String]
  orders: [OrderInput]!
}

input ValidateOrderInput {
  accessToken: String!
  orders: [OrderInput]!
}

union ValidateOrderResult = ValidateOrderResponse | ValidateOrderFailed


type ValidateOrderFailed {
  reason: ValidateOrderFailedReason
}

enum ValidateOrderFailedReason {
  INVALID_ORDER
}

type ValidateOrderResponse {
  errors: [OrderError]
}

type OrderError {
  error: OrderErrorType!
  supplierId: Int!
  productId: Int!
  units: Int
  prevValue: Float
  prevValueMoney: Money
  actualValue: Float
  actualValueMoney: Money
}

enum OrderErrorType {
  PRODUCT_PRICES_HAS_CHANGED,
  MIN_UNITS_NO_REACHED,
  MAX_UNITS_EXCEEDED,
  MAX_ALLOWED_PRODUCT_EXCEEDED,
  MAX_AMOUNT_EXCEEDED,
  MIN_AMOUNT_NO_REACHED,
  SUPPLIER_UNAVAILABLE,
  DELIVERY_COST_CHANGED,
  INVALID_DELIVERY_ZONE
  PRODUCT_UNAVAILABLE
}

input ProductOrderInput {
  productId: Int!
  quantity: Int!
  units: Int
  price: Float!
}

enum SupplierFailedReason {
  NOT_FOUND
}

input GetSupplierInput {
  accessToken: String!
  supplierId: Int!
}

type SupplierFailed {
  reason: SupplierFailedReason
}

union SupplierResponse = Supplier | SupplierFailed

type SupplierRatingsResponse {
  headers: Headers!
  content: [Rating]!
}

input GetSupplierRatingsInput {
  page: Int
  size: Int
  accessToken: String!
  supplierId: Int!
}

input GetSupplierOrderInput {
  accessToken: String!
  supplierOrderId: Int!
}

input OrderSummaryInput {
  accessToken: String!
  wabiPayAccessToken: String
  products: [SupplierCartProductInput]!
  coupons: [String]
}

input SupplierCartProductInput {
  supplierId: Int!
  deliveryZoneId: Int!
  items: [CartItemInput]!
}

input GetSupplierOrdersInput {
  accessToken: String!
  orderId: ID!
}

input CartItemInput {
  productId: Int!
  units: Int
  quantity: Int!
}

type OrderSummaryResponse {
  orderSummary: [OrderSummary]
  orderedOrderSummary: [OrderSummary]
}

type OrderSummary {
  supplier: Supplier!
  summary: [Summary]
}

enum CartSummaryItemType {
  # IBB Component price
  IBB,
  # Only product prices
  PRODUCTS_TOTAL,
  # Product prices plus product taxes
  SUBTOTAL,
  # Product prices no IVA
  NET_SUBTOTAL,
  # Supplier delivery cost
  DELIVERY_COST,
  # Order final price
  ORDER_TOTAL,
  # Wabi Credits
  CREDITS_USED,
  #Money used
  WABIMONEY_USED,
  PAYMENT_PENDING,
  DISCOUNT,

  DISCOUNT_USED,

  TOTAL_BILLED

  SERVICE_FEE
  #Max ammount allowed to pay with wabipay
  MAX_AMOUNT_WABIPAY_ALLOWED

}

type Summary {
  type: CartSummaryItemType!
  value: Float!
  valueMoney: Money!
  metadata: [MetaEntry]
}

type MetaEntry {
  key: String!,
  value: String!
}

enum SupplierOrderFailedReason {
  NOT_FOUND
}

type SupplierOrderFailed {
  reason: SupplierOrderFailedReason
}

enum SummaryFailedReason {
  NOT_FOUND
  PRODUCT_AVAILABILITY_HAS_CHANGED
  PRODUCTS_UNAVAILABLE,
  INVALID_COUPON
}

type SummaryFailed {
  reason: SummaryFailedReason
}

union SupplierOrderResponse = SupplierOrder | SupplierOrderFailed

union SummaryResult = OrderSummaryResponse | SummaryFailed