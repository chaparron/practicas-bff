
type Query {

    # Find Customer by Id
    myProfile(input: CustomerInput!): Customer!

    search (input: SearchInput!): SearchResult

    searchV2 (input: SearchInput!): SearchResponse

    previewSearch (input: PreviewSearchInput!): PreviewSearchResponse

    productDetail(input: ProductInput!): ProductResult

    productDetailByEan(input: ProductEanInput!): ProductResult

    findRootCategories(input: AccessTokenInput!): [Category]

    # Verify Email
    verifyEmail(input: VerifyEmailInput!): VerifyEmailResult!

    # Resend email for verification.
    resendVerifyEmail(input : AccessTokenInput!): ResendVerifyEmailResult!

    # Resend sms for Verification
    resendVerifySMS(input: AccessTokenInput!) : ResendVerifySMSResult!

    # Get all the Customer's addersses, according accessToken
    findAddresses(input: AccessTokenInput) : [AddressType]

    # Get a Customer adderss, according accessToken and id
    getAddress(input: AddressIdInput!): AddressResponse

    getPreferredAddress(input: AccessTokenInput!): AddressResponse

    getCancelOptions(input: AccessTokenInput!): [CustomerCancelOptionReason]

    # Find customer orders
    findCustomerOrders(input: FindOrdersInput!): CustomerOrdersResult!

    # Find unique customer order.
    findCustomerOrder(input: FindSupplierOrderInput!): CustomerOrderResult!

    findCustomerAndSupplierOrders(input : FindCustomerAndSupplierOrdersInput) : CustomerSupplierOrderResult!

    # Get new prices and supplier availabities
    refreshCart(input: RefreshCartInput!): CartResult!

    # Validate username
    validateUsername(input: ValidateUsernameInput!): Boolean!

    # Validate fields
    validate(input: ValidateInput!): Boolean!

    getPendingRatesCount(input: AccessTokenInput!): Int

    customerHasOrders(input: AccessTokenInput!): Boolean

    getSupplierRatings(input: GetSupplierRatingsInput!): SupplierRatingsResponse


    getSupplierOrdersPendingToRate(input: AccessTokenInput!): [SupplierOrder]

    getSupplierOrders(input: GetSupplierOrdersInput!): [SupplierOrder]

    # -- Pending queries
    getSupplier(input: GetSupplierInput!): SupplierResponse

    getHomeBrands(input: GetHomeBrandsInput!): GetHomeBrandsResponse

    previewHomeBrands(input: CoordinatesInput!): GetHomeBrandsResponse

    previewRootCategories(input: CoordinatesInput!): RootCategoriesResponse

    getCountryConfiguration(countryId: String!): [CountryConfigurationEntry]

    getCustomerCountryConfiguration(accessToken: String!): [CountryConfigurationEntry]

    getHomeCountries(locale: String!): [CountryHomeResponse]

    #rating

    # Find supplier order rating
    getSupplierOrder(input: GetSupplierOrderInput!): SupplierOrderResponse

    #findOrderRatings

    #findSupplierRatings

    getPromotions(input:PromotionInput!) : PromotionResponse

    previewPromotions(input: CoordinatesInput!): PromotionResult

    getStatesByCountry(input: String!): [State]

    getOrderPriceSummary(input: OrderSummaryInput!) : SummaryResult

    getLandingPromotion(input: GetLandingPromotionInput!): GetLandingPromotionResult

    previewLandingPromotion(input: CoordinatesInput!): GetLandingPromotionResult

    getBannerDialog(input: String!): BannerDialogResult

    validateOrder(input: ValidateOrderInput!): ValidateOrderResult

    previewHomeSuppliers(input: CoordinatesInput!): HomeSupplierResult

    getSuppliersThatHasSuggestedOrders(input: AccessTokenInput!): [SuppliersNameResult]

    getSuggestedOrder(input: GetSuggestedOrderInput!): SuggestedOrderResult

    findPendingRateSinceLastLogin(input: AccessTokenInput!): [SupplierOrder]

    getFrequentProducts(input: GetFrequentProductsInput!): [FrequentProductResult]

    getFavoriteProducts(input: GetFavoriteProductsInput!): [FavoriteProductResult]
}

type CountryConfigurationEntry {
    key: String
    value: String
}

type CountryHomeResponse {
    id: String!
    name: String!
    design: DesignCountry
    legalUrls: LegalUrlsCountry
}

type DesignCountry {
    flag: String!
}

type LegalUrlsCountry {
    tyc: String
    pp: String
    cookies: String
    faqs: String
    tycSupplier: String
    ppSupplier: String
}

type Mutation {
    # User login
    login(input: LoginInput!): LoginResult!

    # Refresh Credential from a logged user
    refreshCredentials(input: RefreshCredentialsInput!): RefreshCredentialsResult!

    # Change password from an existing user
    changePassword(input: ChangePasswordInput!): ChangePasswordResult

    # Reset password request
    resetPassword(input: ResetPasswordRequestInput!): Void!

    # Reset password confirm
    resetPasswordConfirm(input: ResetPasswordConfirmInput!): ConfirmPasswordResult!

    # Update Customer Profile
    updateProfile(input: CustomerUpdateInput!): CustomerUpdateResult!

    # Verify Customer phone
    verifyPhone(input: VerifyPhoneInput!): VerifyPhoneResult!

    # Set Preferred Customer address
    setPreferredAddress(input: PreferredAddressInput!): PreferredAddressResult!

    # Add new Customer address
    addAddress(input: AddressTypeUpsertInput!): AddAddressResult!

    # Cancel pending orders
    cancelOrder(input: CancelOrderInput!): CancelOrderResult!

    # Cancel Reason
    cancelOrderReason(input : CancelOrderInput!) : CancelOrderResonResult!

    # Update Customer address
    updateAddress(input: AddressTypeUpsertInput!) : UpdateAddressResult!

    # Delete Customer address
    deleteAddress(input: AddressIdInput!) : DeleteAddressResult!

    # Creates an order
    placeOrder(input: PlaceOrderInput!): PlaceOrderResult

    #registro
    signIn(input: SignInInput!): SignInResult

    # Registro
    # El upload de imágenes / archivos solo permite los siguientes formatos:
    # JPEG, PNG, PDF.
    # En caso contrario, el error será: UNSUPPORTED_MEDIA_TYPE
    uploadVerificationDocument(input: Document!): UploadDocumentResult

    customerRateSupplier(input: CustomerRateSupplierInput!): CustomerRateSupplierResult

    customerReportRate(input: CustomerReportRateInput!): CustomerReportRateResult

    enableWhatsApp(input: AccessTokenInput!): Void!

    disableWhatsApp(input: AccessTokenInput!): Void!

    userDevice(input: UserDeviceInput!): Void!

    deleteUserDevice(input: AccessTokenInput!): Void!

    markSuggestionAsRead(input: MarkSuggestionInput !): Void!

    acceptTc(input: AcceptTcInput!): Void!

    markProductAsFavorite(input: ProductToMarkAsFavoriteInput): Void!

    unmarkProductAsFavorite(input: ProductToUnmarkAsFavoriteInput): Void!
}

input CustomerRateSupplierInput {
    accessToken: String!
    supplierOrderId: Int!,
    supplierId: Int!,
    score: Int!
    opinion: String
}

input CustomerReportRateInput {
    accessToken: String!
    rateId: Int!
}


enum CustomerRateSupplierFailedReason {
    SUPPLIER_ALREADY_RATED_BY_CUSTOMER,
    INVALID_RATE,
    INVALID_SUPPLIER_ORDER
    INVALID_SUPPLIER_ID
    INVALID_SCORE

}

enum CustomerReportRateFailedResult {
    RATE_NOT_FOUND
}

type CustomerReportRateFailer {
    reason: CustomerReportRateFailedResult!
}

type CustomerRateSupplierFailed {
    reason: CustomerRateSupplierFailedReason!
}

type CustomerReportRateFailed {
    reason: CustomerReportRateFailedResult!
}

union CustomerRateSupplierResult = Void | CustomerRateSupplierFailed

union CustomerReportRateResult = Void | CustomerReportRateFailed


enum PageSize {
    ZERO
    ONE
    TEN
    TWENTY
    FIFTY
    ONE_HUNDRED
}

enum UsernameRegistrationReason {
    INVALID_FIRST_NAME,
    INVALID_LAST_NAME,
    INVALID_USERNAME,
    DUPLICATE_USERNAME,
    INVALID_FIRST_NAME_LENGTH,
    INVALID_LAST_NAME_LENGTH,
    INVALID_USERNAME_LENGTH
}

enum CompleteProfileReason {
    # Generic Error
    PROFILE_ERROR
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

input PageInput {
    # número de pagina comienza en 1
    number: Int!
    size: PageSize!
}

input ListUsersInput {
    query: String
    page: PageInput!
    accessToken: String!
}

input ListMyFavoritesInput {
    page: PageInput!
    accessToken: String!
}

input CompleteProfileInput {
    document: String!
    phone: String!
    address: String!
    recaptchaResponse: String!
    accessToken: String!
}

input UsernameInput {
    userId: ID!
    accessToken: String!
}


input ListGroupsInput {
    authType: AuthType!
    accessToken: String!
}


# Se requiere un ID sin accessToken
input IdInput {
    id: ID!
}

input UserInput {
    id: ID!
    accessToken: String!
}

input UploadImageInput {
    encodedFile: String!
    accessToken: String!

}

input AccessTokenInput {
    accessToken: String!
}

type UsernameRegistrationFailed {
    reason: UsernameRegistrationReason!
}

type RegisterFailed {
    registerReason: RegisterFailureReason!
}

type ProfileCredentials {
    accessToken: String!
}

type CompleteProfileFailed {
    reason: CompleteProfileReason
}

type Sort{
    field: String!
    direction: String!
}
type Facet{
    id: String!
    name: String!
    slices: [Slices]
}

type Slices{
    size: Int!
    obj: Slice
}

type Slice {
    id: String!
    name: String!
    key: String!
}

input UpdateBoostInput {
    id: ID!
    boost: ID!
    accessToken: String!
}

input FacetFilter{
    key: String!
    value: String!
}

input ValidateUsernameInput{
    id: ID
    username: String!
}

input ValidateInput{
    id: ID
    value: String!
    country_id: String!
    accessToken: String
    validationType: ValidationType!
}

input UserDeviceInput{
    pushToken: String!
    accessToken: String!
    os: String
    appVersion: String
}

input CoordinatesInput {
    lat: Float!
    lng: Float!
    countryId: String
}

input MarkSuggestionInput {
   accessToken: String!
   supplierIds: [Int]!
}

enum ValidationType{
      USER_PHONE,
      USER_CELL_PHONE,
      USER_USERNAME,
      CUSTOMER_LEGAL_ID,
      CUSTOMER_LINE_PHONE
}


enum AddAddressFailedReason {
    INVALID_GOOGLE_ADDRESS,
    INVALID_LATITUDE,
    INVALID_LONGITUDE,
    CUSTOMER_ALREADY_HAS_LEGAL_ADDRESS
    INVALID_STATE,
    INVALID_ADDRESSES
}


type AddAddressFailed {
    reason: AddAddressFailedReason!
}

enum DeleteAddressFailedResult {
    NOT_ADDRESS_CUSTOMER
}

type SiteConfigurationFailed {
    reason: SiteConfigurationFailedReason!
}

enum SiteConfigurationFailedReason {
    NOT_FOUND
}

type DeleteAddressFailed {
    reason: DeleteAddressFailedResult!
}

type BannerDialog {
    dialog: Dialog
    banner: Banner
}

type Dialog {
    image: String
    dialogContent: [DialogContent]!
}

type Banner {
    bannerContent: [BannerContent]!
}

type BannerContent {
    content: String
    lang: String!
}

type DialogContent {
    title: String
    text: String
    lang: String!
}


union UsernameRegistrationResult = UsernameRegistrationFailed | Void

union CustomerUpdateResult = CustomerErrorFailed  | Customer

union VerifyEmailResult = CustomerErrorFailed | Void

union VerifyPhoneResult = CustomerErrorFailed | Void

union ResendVerifyEmailResult = CustomerErrorFailed | Void

union ResendVerifySMSResult = CustomerErrorFailed | Void

union PreferredAddressResult = CustomerErrorFailed | Void

union UpdateAddressResult = CustomerErrorFailed | Void

union DeleteAddressResult = DeleteAddressFailed | Void

union AddAddressResult = AddAddressFailed | Void

union SignInResult = SignInFailed | GenericCredentials

union BannerDialogResult = SiteConfigurationFailed | BannerDialog

